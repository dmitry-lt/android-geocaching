#summary LocationManager: HowTo

= Введение =

!LocationManager (su.geocaching.android.controller.!LocationManager.java) предназначен для получения информации о местоположении пользователя. Когда появляются новые координаты, !LocationManager сообщает об этом.


= Как с этим работать =

Для того, чтобы пользоваться !LocationManager ваш класс должен реализовывать интерфейс [LocationManager#ILocationAware ILocationAware].
Создавать объект !LocationManager не нужно. Для того, чтобы получить !LocationManager следует вызвать метод getLocationManager(Context context), где параметром передаётся контекст из которого можно получить LocationManager. Пример получения !LocationManager из Activity:

{{{
Controller mController = Controller.getInstance();
LocationManager mLocationManager = mController.getLocationManager(this);
}}}

Для того, чтобы сообщить !LocationManager о том, что вы хотите (не) получать обновления положения есть 2 метода:

{{{
public void addSubscriber(ILocationAware subsriber)

public boolean removeSubsriber(ILocationAware subsriber)
}}}

В тот момент, когда вам необходимо начать получать обновления нужно вызвать метод addSubscriber, где параметром передаётся сущность, которая будет уведомляться об обновлениях положения.
Для того, чтобы больше не получать обновления следует вызвать метод removeSubscriber, где параметром передаётся тоже самое, что и выше.
===Важно!===
Если Вы используете !LocationManager в активити, то *необходимо* вызывать removeSubscriber не позже onPause в смысле [http://developer.android.com/reference/android/app/Activity.html#ActivityLifecycle жизненного цикла activity]. В противном случае, есть шанс, что GPS не будет выключен после выхода из приложения.

=ILocationAware=
{{{
public interface ILocationAware {
    public void updateLocation(Location location);

    public void onStatusChanged(String provider, int status, Bundle extras);

    public void onProviderEnabled(String provider);

    public void onProviderDisabled(String provider);
}
}}}
ILocationAware - интерфейс с которым работает LocationManager. В тот момент, когда случается то или иное событие вызывается соответствующий метод. Почитать более подробно об этих методах можно здесь: http://developer.android.com/reference/android/location/LocationListener.html

===updateLocation===
Случается тогда, когда получено новое положение пользователя. 

===onStatusChanged===
Вызывается когда изменяется статус провайдера (параметр String provider). Параметр status принимает значения:
 * [http://developer.android.com/reference/android/location/LocationProvider.html LocationProvider].OUT_OF_SERVICE если провайдер недоступен и в ближайшем будущем вряд ли будет работать. 
 * [http://developer.android.com/reference/android/location/LocationProvider.html LocationProvider].TEMPORARILY_UNAVAILABLE если провайдер временно недоступен и в скором будущем должен возобновить работу.
 * [http://developer.android.com/reference/android/location/LocationProvider.html LocationProvider].AVAILABLE если провайдер в данный момент доступен.
Параметр extras может содержать специальную информацию о провайдере. Например, с ключом satellites сопоставлено количество спутников, использованных в определении текущего местоположения.

===onProviderEnabled===
Вызывается, когда пользователь включил провайдера с именем provider.

===onProviderDisabled===
Вызывается, когда пользователь выключил провайдера с именем provider.

=Компас по GPS=
Возможна ситуация, когда на устройстве отсутствует акселерометр и получать азимут пользователя с помощью встроенных механизмов невозможно. Если аппаратный компас недоступен и сущность, которая получает обновления положения, также реализует [CompassManager#ICompassAware ICompassAware], то в этом случае при вызове [LocationManager#updateLocation updateLocation] будет вызван метод updateBearing из интерфейса [CompassManager#ICompassAware ICompassAware]. Этот азимут определяется по направлению движения пользователя и стоит иметь в виду, что если положение определяется по GSM/!WiFi сетям этот азимут скорее всего будет неопределён(и равен нулю).

=Как это работает=
На протяжении работы приложения !LocationManager создаётся лишь один раз - в Controller'е при первом вызове Controller.getLocationManager(Context context). Класс !LocationManager хранит в себе список объектов, реализующих [LocationManager#ILocationAware ILocationAware], которые получают обновления положения пользователя (назовём их подписчики), и оперирует с ним при вызове методов !LocationManager.addSubscriber(ILocationAware subsriber) и !LocationManager.removeSubsriber(ILocationAware subsriber). 

Как только появляется хотя бы один подписчик, делается запрос к системе для получения обновлений положения. В тот момент, когда обновилось положение или провайдер стал доступен/недоступен все подписчики уведомляются об этом событии, посредством вызова соответствующего метода интерфейса [LocationManager#ILocationAware ILocationAware].

В тот момент, когда количество подписчиков становится нулевым запускается таймер на 30 секунд, по истечении которых посылается запрос системе на удаление обновлений положения. Такое решение обусловлено тем, что activity, использующие !LocationManager, должны удаляться из подписчиков не позже onResume, а, следовательно, при переходе из одной активити, использующей !LocationManager, в другую без таймера сначала происходило бы удаление обновлений положения, а затем добавление.
 